// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Rarity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Rarity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Rarity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Rarity", id.toString(), this);
  }

  static load(id: string): Rarity | null {
    return store.get("Rarity", id) as Rarity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Link(): string | null {
    let value = this.get("Link");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Link(value: string | null) {
    if (value === null) {
      this.unset("Link");
    } else {
      this.set("Link", Value.fromString(value as string));
    }
  }

  get Owner(): string | null {
    let value = this.get("Owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Owner(value: string | null) {
    if (value === null) {
      this.unset("Owner");
    } else {
      this.set("Owner", Value.fromString(value as string));
    }
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transfer", id.toString(), this);
  }

  static load(id: string): Transfer | null {
    return store.get("Transfer", id) as Transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Rarity(): string | null {
    let value = this.get("Rarity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Rarity(value: string | null) {
    if (value === null) {
      this.unset("Rarity");
    } else {
      this.set("Rarity", Value.fromString(value as string));
    }
  }

  get PreviousOwner(): string | null {
    let value = this.get("PreviousOwner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set PreviousOwner(value: string | null) {
    if (value === null) {
      this.unset("PreviousOwner");
    } else {
      this.set("PreviousOwner", Value.fromString(value as string));
    }
  }

  get NewOwner(): string | null {
    let value = this.get("NewOwner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set NewOwner(value: string | null) {
    if (value === null) {
      this.unset("NewOwner");
    } else {
      this.set("NewOwner", Value.fromString(value as string));
    }
  }

  get Operator(): Bytes | null {
    let value = this.get("Operator");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set Operator(value: Bytes | null) {
    if (value === null) {
      this.unset("Operator");
    } else {
      this.set("Operator", Value.fromBytes(value as Bytes));
    }
  }
}

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Owner entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Owner entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Owner", id.toString(), this);
  }

  static load(id: string): Owner | null {
    return store.get("Owner", id) as Owner | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Rarities(): Array<string> | null {
    let value = this.get("Rarities");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set Rarities(value: Array<string> | null) {
    if (value === null) {
      this.unset("Rarities");
    } else {
      this.set("Rarities", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Stats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Stats entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Stats entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Stats", id.toString(), this);
  }

  static load(id: string): Stats | null {
    return store.get("Stats", id) as Stats | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get OwnersCount(): BigInt | null {
    let value = this.get("OwnersCount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set OwnersCount(value: BigInt | null) {
    if (value === null) {
      this.unset("OwnersCount");
    } else {
      this.set("OwnersCount", Value.fromBigInt(value as BigInt));
    }
  }

  get RaritiesCount(): BigInt | null {
    let value = this.get("RaritiesCount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set RaritiesCount(value: BigInt | null) {
    if (value === null) {
      this.unset("RaritiesCount");
    } else {
      this.set("RaritiesCount", Value.fromBigInt(value as BigInt));
    }
  }

  get TranfersCount(): BigInt | null {
    let value = this.get("TranfersCount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set TranfersCount(value: BigInt | null) {
    if (value === null) {
      this.unset("TranfersCount");
    } else {
      this.set("TranfersCount", Value.fromBigInt(value as BigInt));
    }
  }
}
